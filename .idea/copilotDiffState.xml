<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/examples/declarative_hello/DeclarativeMain.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/examples/declarative_hello/DeclarativeMain.java" />
              <option name="updatedContent" value="package examples.declarative_hello;&#10;&#10;import io.github._3xhaust.core.App;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.state.State;&#10;&#10;import java.awt.*;&#10;&#10;import static io.github._3xhaust.dsl.Layouts.*;&#10;import static io.github._3xhaust.dsl.Widgets.*;&#10;import static io.github._3xhaust.dsl.Styles.*;&#10;&#10;public class DeclarativeMain {&#10;    public static View MyApp() {&#10;        State&lt;Integer&gt; count = State.of(0);&#10;&#10;        return Center(&#10;                Column(&#10;                        Text(&quot;Hello, Declarative World!&quot;, &#10;                             &quot;fontSize&quot;, 24, &#10;                             &quot;fontStyle&quot;, &quot;bold&quot;, &#10;                             &quot;color&quot;, Color.BLUE, &#10;                             &quot;textAlign&quot;, &quot;center&quot;),&#10;                        &#10;                        Label(&quot;Counter Application&quot;, &#10;                              &quot;fontSize&quot;, 16, &#10;                              &quot;color&quot;, Color.DARK_GRAY, &#10;                              &quot;textAlign&quot;, &quot;center&quot;),&#10;                        &#10;                        Row(&#10;                                Button(&quot;-&quot;, () -&gt; count.update(v -&gt; Math.max(0, v-1)), &#10;                                       &quot;fontSize&quot;, 14, &#10;                                       &quot;fontStyle&quot;, &quot;bold&quot;, &#10;                                       &quot;backgroundColor&quot;, Color.LIGHT_GRAY, &#10;                                       &quot;border&quot;, border(1, &quot;gray&quot;)),&#10;                                &#10;                                Text(count, &#10;                                     &quot;font&quot;, &quot;Courier New&quot;, &#10;                                     &quot;fontSize&quot;, 18, &#10;                                     &quot;color&quot;, Color.RED, &#10;                                     &quot;backgroundColor&quot;, new Color(255, 255, 200), &#10;                                     &quot;padding&quot;, 10, &#10;                                     &quot;border&quot;, border(2, &quot;black&quot;), &#10;                                     &quot;textAlign&quot;, &quot;center&quot;),&#10;                                &#10;                                Button(&quot;+&quot;, () -&gt; count.set(count.get()+1), &#10;                                       &quot;fontSize&quot;, 14, &#10;                                       &quot;fontStyle&quot;, &quot;bold&quot;, &#10;                                       &quot;backgroundColor&quot;, Color.LIGHT_GRAY, &#10;                                       &quot;border&quot;, border(1, &quot;gray&quot;))&#10;                        )&#10;                )&#10;        );&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        App.run(MyApp());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/examples/flutter_layouts/FlutterLayoutsMain.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/examples/flutter_layouts/FlutterLayoutsMain.java" />
              <option name="updatedContent" value="package examples.flutter_layouts;&#10;&#10;import io.github._3xhaust.core.App;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.state.State;&#10;&#10;import static io.github._3xhaust.dsl.Layouts.*;&#10;import static io.github._3xhaust.dsl.Widgets.*;&#10;import static io.github._3xhaust.dsl.Mod.*;&#10;import static io.github._3xhaust.theme.Tokens.*;&#10;import static io.github._3xhaust.dsl.enums.MainAxisAlignment.*;&#10;import static io.github._3xhaust.dsl.enums.CrossAxisAlignment.*;&#10;&#10;public class FlutterLayoutsMain {&#10;    public static View MyApp() {&#10;        var count = State.of(0);&#10;&#10;        return Center(&#10;            Column(&#10;                Text(&quot;Flutter-Style Layouts&quot;)&#10;                    .font(size(28), weightBold())&#10;                    .color(Blue500)&#10;                    .alignCenter(),&#10;&#10;                SizedBox(400, 20), // Spacer&#10;&#10;                // Row with different alignments&#10;                Row(&#10;                    Text(&quot;Start&quot;)&#10;                        .font(size(14))&#10;                        .color(White)&#10;                        .background(Red600)&#10;                        .padding(8),&#10;                    &#10;                    Expanded(&#10;                        Text(&quot;Expanded Center&quot;)&#10;                            .font(size(14))&#10;                            .color(White)&#10;                            .background(Green500)&#10;                            .padding(8)&#10;                            .alignCenter()&#10;                    ),&#10;                    &#10;                    Text(&quot;End&quot;)&#10;                        .font(size(14))&#10;                        .color(White)&#10;                        .background(Purple500)&#10;                        .padding(8)&#10;                )&#10;                .mainAxisAlignment(SPACE_BETWEEN)&#10;                .crossAxisAlignment(CENTER)&#10;                .padding(16),&#10;&#10;                SizedBox(400, 16),&#10;&#10;                // Center alignment example&#10;                Row(&#10;                    Button(&quot;Left&quot;, () -&gt; {}),&#10;                    Button(&quot;Center&quot;, () -&gt; {}),&#10;                    Button(&quot;Right&quot;, () -&gt; {})&#10;                )&#10;                .mainAxisAlignment(CENTER)&#10;                .gap(8),&#10;&#10;                SizedBox(400, 16),&#10;&#10;                // Space evenly example&#10;                Row(&#10;                    Text(&quot;1&quot;).color(White).background(Orange500).padding(12),&#10;                    Text(&quot;2&quot;).color(White).background(Orange500).padding(12),&#10;                    Text(&quot;3&quot;).color(White).background(Orange500).padding(12),&#10;                    Text(&quot;4&quot;).color(White).background(Orange500).padding(12)&#10;                )&#10;                .mainAxisAlignment(SPACE_EVENLY)&#10;                .padding(16),&#10;&#10;                SizedBox(400, 16),&#10;&#10;                // Counter with flexible layout&#10;                Row(&#10;                    Button(&quot;-&quot;, () -&gt; count.update(v -&gt; Math.max(0, v - 1)))&#10;                        .font(size(16), weightBold())&#10;                        .background(Gray200)&#10;                        .border(1, Gray400)&#10;                        .padding(8, 16),&#10;&#10;                    Flexible(&#10;                        Text(count)&#10;                            .font(family(&quot;Courier New&quot;), size(20))&#10;                            .color(Red600)&#10;                            .background(Yellow50)&#10;                            .padding(12)&#10;                            .border(2, Black)&#10;                            .alignCenter()&#10;                    ),&#10;&#10;                    Button(&quot;+&quot;, () -&gt; count.set(count.get() + 1))&#10;                        .font(size(16), weightBold())&#10;                        .background(Gray200)&#10;                        .border(1, Gray400)&#10;                        .padding(8, 16)&#10;                )&#10;                .mainAxisAlignment(SPACE_BETWEEN)&#10;                .crossAxisAlignment(CENTER)&#10;                .gap(8)&#10;            )&#10;            .mainAxisAlignment(MainAxisAlignment.CENTER)&#10;            .crossAxisAlignment(CrossAxisAlignment.CENTER)&#10;            .padding(24)&#10;        );&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        App.run(MyApp());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/examples/flutter_style/FlutterStyleMain.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/examples/flutter_style/FlutterStyleMain.java" />
              <option name="updatedContent" value="package examples.flutter_style;&#10;&#10;import io.github._3xhaust.core.App;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.state.State;&#10;import io.github._3xhaust.dsl.styles.TextStyle;&#10;import io.github._3xhaust.dsl.styles.ButtonStyle;&#10;import io.github._3xhaust.dsl.styles.BorderStyle;&#10;&#10;import java.awt.*;&#10;&#10;import static io.github._3xhaust.dsl.Layouts.*;&#10;import static io.github._3xhaust.dsl.Widgets.*;&#10;&#10;public class FlutterStyleMain {&#10;    public static View MyApp() {&#10;        State&lt;Integer&gt; count = State.of(0);&#10;&#10;        return Center(&#10;                Column(&#10;                        Text(&quot;Hello, Flutter Style!&quot;,&#10;                             new TextStyle()&#10;                                     .fontSize(24)&#10;                                     .fontWeight(&quot;bold&quot;)&#10;                                     .color(&quot;blue&quot;)&#10;                                     .textAlign(&quot;center&quot;)),&#10;&#10;                        Label(&quot;Counter Application&quot;,&#10;                              new TextStyle()&#10;                                      .fontSize(16)&#10;                                      .color(&quot;darkgray&quot;)&#10;                                      .textAlign(&quot;center&quot;)),&#10;&#10;                        Row(&#10;                                Button(&quot;-&quot;, () -&gt; count.update(v -&gt; Math.max(0, v-1)),&#10;                                       new ButtonStyle()&#10;                                               .fontSize(14)&#10;                                               .fontWeight(&quot;bold&quot;)&#10;                                               .backgroundColor(&quot;lightgray&quot;)&#10;                                               .preferredSize(50, 30)&#10;                                               .border(BorderStyle.all(1, &quot;solid&quot;, &quot;gray&quot;))),&#10;&#10;                                Text(count,&#10;                                     new TextStyle()&#10;                                             .fontFamily(&quot;Courier New&quot;)&#10;                                             .fontSize(18)&#10;                                             .color(&quot;red&quot;)&#10;                                             .backgroundColor(new Color(255, 255, 200))&#10;                                             .textAlign(&quot;center&quot;)&#10;                                             .padding(10)&#10;                                             .border(BorderStyle.all(2, &quot;solid&quot;, &quot;black&quot;))),&#10;&#10;                                Button(&quot;+&quot;, () -&gt; count.set(count.get()+1),&#10;                                       new ButtonStyle()&#10;                                               .fontSize(14)&#10;                                               .fontWeight(&quot;bold&quot;)&#10;                                               .backgroundColor(&quot;lightgray&quot;)&#10;                                               .preferredSize(50, 30)&#10;                                               .border(BorderStyle.all(1, &quot;solid&quot;, &quot;gray&quot;)))&#10;                        )&#10;                )&#10;        );&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        App.run(MyApp());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/examples/hello_world/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/examples/hello_world/Main.java" />
              <option name="originalContent" value="package examples.hello_world;&#10;&#10;import io.github._3xhaust.core.App;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.state.State;&#10;import io.github._3xhaust.theme.Colors;&#10;&#10;import static io.github._3xhaust.dsl.Layouts.*;&#10;import static io.github._3xhaust.dsl.Widgets.*;&#10;import static io.github._3xhaust.dsl.Mod.*;&#10;&#10;public class Main {&#10;    public static View MyApp() {&#10;        var count = State.of(0);&#10;&#10;        return Center(&#10;                Column(&#10;                        Text(&quot;Hello, Declarative World!&quot;)&#10;                                .font(size(24), weightBold())&#10;                                .color(Colors.Black)&#10;                                .alignCenter(),&#10;&#10;                        Label(&quot;Counter Application&quot;)&#10;                                .font(size(16))&#10;                                .color(Colors.Gray600)&#10;                                .alignCenter(),&#10;&#10;                        Row(&#10;                                Button(&quot;-&quot;, () -&gt; count.update(v -&gt; Math.max(0, v - 1))),&#10;                                Text(count),&#10;                                Button(&quot;+&quot;, () -&gt; count.set(count.get() + 1))&#10;                        )&#10;                )&#10;        );&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        App.run(MyApp());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package examples.hello_world;&#10;&#10;import io.github._3xhaust.core.App;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.state.State;&#10;import io.github._3xhaust.theme.Colors;&#10;&#10;import static io.github._3xhaust.dsl.Layouts.*;&#10;import static io.github._3xhaust.dsl.Widgets.*;&#10;import static io.github._3xhaust.dsl.Mod.*;&#10;&#10;public class Main {&#10;    public static View MyApp() {&#10;        var count = State.of(0);&#10;&#10;        return Center(&#10;                Column(&#10;                        // Material Design 헤드라인 스타일&#10;                        Headline1(&quot;Material UI Demo&quot;)&#10;                                .alignCenter(),&#10;&#10;                        Headline3(&quot;Counter Application&quot;)&#10;                                .alignCenter(),&#10;                                &#10;                        Body1(&quot;Click the buttons to change the counter value&quot;)&#10;                                .alignCenter(),&#10;&#10;                        // 현재 카운터 값을 큰 텍스트로 표시&#10;                        Text(count)&#10;                                .font(fontSize(48), fontWeight(Font.BOLD))&#10;                                .color(Colors.Blue500)&#10;                                .alignCenter(),&#10;&#10;                        // Material Design 스타일 버튼들&#10;                        Row(&#10;                                DangerButton(&quot;Reset&quot;, () -&gt; count.set(0)),&#10;                                SecondaryButton(&quot;-&quot;, () -&gt; count.update(v -&gt; Math.max(0, v - 1))),&#10;                                PrimaryButton(&quot;+&quot;, () -&gt; count.set(count.get() + 1)),&#10;                                SuccessButton(&quot;x2&quot;, () -&gt; count.update(v -&gt; v * 2))&#10;                        ),&#10;                        &#10;                        // 추가 정보&#10;                        Caption(&quot;Made with JavaUI Framework&quot;)&#10;                                .alignCenter()&#10;                                .color(Colors.Grey500)&#10;                )&#10;        );&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        App.run(MyApp());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/examples/styled_hello/StyledMain.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/examples/styled_hello/StyledMain.java" />
              <option name="updatedContent" value="package examples.styled_hello;&#10;&#10;import io.github._3xhaust.core.App;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.dsl.Style;&#10;import io.github._3xhaust.state.State;&#10;&#10;import java.awt.*;&#10;&#10;import static io.github._3xhaust.dsl.Layouts.*;&#10;import static io.github._3xhaust.dsl.Widgets.*;&#10;&#10;public class StyledMain {&#10;    public static View MyApp() {&#10;        State&lt;Integer&gt; count = State.of(0);&#10;&#10;        Style titleStyle = new Style()&#10;                .font(&quot;Arial&quot;, Font.BOLD, 24)&#10;                .color(Color.BLUE)&#10;                .alignCenter();&#10;&#10;        Style countStyle = new Style()&#10;                .font(&quot;Courier New&quot;, Font.PLAIN, 18)&#10;                .color(Color.RED)&#10;                .backgroundColor(255, 255, 200)&#10;                .padding(10)&#10;                .border(2, Color.BLACK)&#10;                .alignCenter();&#10;&#10;        Style buttonStyle = new Style()&#10;                .font(&quot;Dialog&quot;, Font.BOLD, 14)&#10;                .backgroundColor(Color.LIGHT_GRAY)&#10;                .preferredSize(60, 40)&#10;                .border(1, Color.DARK_GRAY);&#10;&#10;        return Center(&#10;                Column(&#10;                        Text(&quot;Hello, Styled World!&quot;, titleStyle),&#10;                        Label(&quot;Counter Application&quot;, &#10;                                new Style().fontSize(16).color(Color.DARK_GRAY).alignCenter()),&#10;                        Row(&#10;                                Button(&quot;-&quot;, () -&gt; count.update(v -&gt; Math.max(0, v-1)), buttonStyle),&#10;                                Text(count, countStyle),&#10;                                Button(&quot;+&quot;, () -&gt; count.set(count.get()+1), buttonStyle)&#10;                        )&#10;                )&#10;        );&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        App.run(MyApp());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/dsl/Widgets.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/dsl/Widgets.java" />
              <option name="originalContent" value="package io.github._3xhaust.dsl;&#10;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.platform.swing.SwingRenderer;&#10;import io.github._3xhaust.state.State;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;&#10;public class Widgets {&#10;&#10;    public static TextWidget Text(String value) {&#10;        return new TextWidget(value);&#10;    }&#10;&#10;    public static TextWidget Text(State&lt;?&gt; state) {&#10;        return new TextWidget(state);&#10;    }&#10;&#10;    public static ButtonWidget Button(String text, Runnable onClick) {&#10;        return new ButtonWidget(text, onClick, &quot;primary&quot;);&#10;    }&#10;&#10;    public static TextWidget Label(String text) {&#10;        return new TextWidget(text, true);&#10;    }&#10;&#10;    public static TextWidget Label(State&lt;?&gt; state) {&#10;        return new TextWidget(state, true);&#10;    }&#10;&#10;    public static class TextWidget implements View {&#10;        private final String text;&#10;        private final State&lt;?&gt; state;&#10;        private final boolean isLabel;&#10;&#10;        private Font font;&#10;        private Color color;&#10;        private Color backgroundColor;&#10;        private int textAlign = -1;&#10;        private Insets padding;&#10;        private BorderInfo border;&#10;        private Dimension minSize;&#10;&#10;        public TextWidget(String text) {&#10;            this.text = text;&#10;            this.state = null;&#10;            this.isLabel = false;&#10;        }&#10;&#10;        public TextWidget(State&lt;?&gt; state) {&#10;            this.text = null;&#10;            this.state = state;&#10;            this.isLabel = false;&#10;        }&#10;&#10;        public TextWidget(String text, boolean isLabel) {&#10;            this.text = text;&#10;            this.state = null;&#10;            this.isLabel = isLabel;&#10;        }&#10;&#10;        public TextWidget(State&lt;?&gt; state, boolean isLabel) {&#10;            this.text = null;&#10;            this.state = state;&#10;            this.isLabel = isLabel;&#10;        }&#10;&#10;        public TextWidget font(Mod.FontModifier... modifiers) {&#10;            if (modifiers.length == 1) {&#10;                this.font = modifiers[0].toFont();&#10;            } else {&#10;                String family = Font.SANS_SERIF;&#10;                int size = 12;&#10;                int weight = Font.PLAIN;&#10;&#10;                for (Mod.FontModifier mod : modifiers) {&#10;                    if (mod.getFamily() != null) family = mod.getFamily();&#10;                    if (mod.getSize() != -1) size = mod.getSize();&#10;                    if (mod.getWeight() != -1) weight = mod.getWeight();&#10;                }&#10;&#10;                this.font = new Font(family, weight, size);&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public TextWidget color(Color color) {&#10;            this.color = color;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget background(Color color) {&#10;            this.backgroundColor = color;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget alignCenter() {&#10;            this.textAlign = SwingConstants.CENTER;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget alignLeft() {&#10;            this.textAlign = SwingConstants.LEFT;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget alignRight() {&#10;            this.textAlign = SwingConstants.RIGHT;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget padding(int all) {&#10;            this.padding = new Insets(all, all, all, all);&#10;            return this;&#10;        }&#10;&#10;        public TextWidget padding(int vertical, int horizontal) {&#10;            this.padding = new Insets(vertical, horizontal, vertical, horizontal);&#10;            return this;&#10;        }&#10;&#10;        public TextWidget border(int width, Color color) {&#10;            this.border = new BorderInfo(width, color);&#10;            return this;&#10;        }&#10;&#10;        public TextWidget minWidth(int width) {&#10;            this.minSize = new Dimension(width, 0);&#10;            return this;&#10;        }&#10;&#10;        @Override&#10;        public void render(io.github._3xhaust.core.Renderer renderer) {&#10;            if (renderer instanceof SwingRenderer swing) {&#10;                JLabel label;&#10;                if (state != null) {&#10;                    label = swing.label(state);&#10;                } else {&#10;                    label = swing.label(text);&#10;                }&#10;&#10;                applyModifiers(label);&#10;                swing.addComponent(label);&#10;            }&#10;        }&#10;&#10;        private void applyModifiers(JLabel label) {&#10;            if (font != null) {&#10;                label.setFont(font);&#10;            }&#10;            if (color != null) {&#10;                label.setForeground(color);&#10;            }&#10;            if (backgroundColor != null) {&#10;                label.setBackground(backgroundColor);&#10;                label.setOpaque(true);&#10;            }&#10;            if (textAlign != -1) {&#10;                label.setHorizontalAlignment(textAlign);&#10;            }&#10;            if (minSize != null) {&#10;                label.setMinimumSize(minSize);&#10;                label.setPreferredSize(minSize);&#10;            }&#10;            if (border != null) {&#10;                label.setBorder(BorderFactory.createLineBorder(border.color, border.width));&#10;            }&#10;            if (padding != null) {&#10;                javax.swing.border.Border currentBorder = label.getBorder();&#10;                javax.swing.border.Border paddingBorder = BorderFactory.createEmptyBorder(&#10;                    padding.top, padding.left, padding.bottom, padding.right&#10;                );&#10;                if (currentBorder != null) {&#10;                    label.setBorder(BorderFactory.createCompoundBorder(currentBorder, paddingBorder));&#10;                } else {&#10;                    label.setBorder(paddingBorder);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    public static class ButtonWidget implements View {&#10;        private final String text;&#10;        private final Runnable onClick;&#10;        private final String buttonType;&#10;&#10;        private Font font;&#10;        private Color color;&#10;        private Color backgroundColor;&#10;        private Insets padding;&#10;        private BorderInfo border;&#10;        private Dimension preferredSize;&#10;&#10;        public ButtonWidget(String text, Runnable onClick) {&#10;            this(text, onClick, &quot;primary&quot;);&#10;        }&#10;&#10;        public ButtonWidget(String text, Runnable onClick, String buttonType) {&#10;            this.text = text;&#10;            this.onClick = onClick;&#10;            this.buttonType = buttonType;&#10;        }&#10;&#10;        public ButtonWidget font(Mod.FontModifier... modifiers) {&#10;            if (modifiers.length == 1) {&#10;                this.font = modifiers[0].toFont();&#10;            } else {&#10;                String family = Font.SANS_SERIF;&#10;                int size = 12;&#10;                int weight = Font.PLAIN;&#10;&#10;                for (Mod.FontModifier mod : modifiers) {&#10;                    if (mod.getFamily() != null) family = mod.getFamily();&#10;                    if (mod.getSize() != -1) size = mod.getSize();&#10;                    if (mod.getWeight() != -1) weight = mod.getWeight();&#10;                }&#10;&#10;                this.font = new Font(family, weight, size);&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget color(Color color) {&#10;            this.color = color;&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget background(Color color) {&#10;            this.backgroundColor = color;&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget padding(int all) {&#10;            this.padding = new Insets(all, all, all, all);&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget padding(int vertical, int horizontal) {&#10;            this.padding = new Insets(vertical, horizontal, vertical, horizontal);&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget border(int width, Color color) {&#10;            this.border = new BorderInfo(width, color);&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget size(int width, int height) {&#10;            this.preferredSize = new Dimension(width, height);&#10;            return this;&#10;        }&#10;&#10;        @Override&#10;        public void render(io.github._3xhaust.core.Renderer renderer) {&#10;            if (renderer instanceof SwingRenderer swing) {&#10;                JButton button;&#10;&#10;                switch (buttonType) {&#10;                    case &quot;secondary&quot; -&gt; button = swing.secondaryButton(text, onClick);&#10;                    case &quot;success&quot; -&gt; button = swing.successButton(text, onClick);&#10;                    case &quot;danger&quot; -&gt; button = swing.dangerButton(text, onClick);&#10;                    case &quot;warning&quot; -&gt; button = swing.warningButton(text, onClick);&#10;                    default -&gt; button = swing.primaryButton(text, onClick);&#10;                }&#10;&#10;                applyModifiers(button);&#10;                swing.addComponent(button);&#10;            }&#10;        }&#10;&#10;        private void applyModifiers(JButton button) {&#10;            if (font != null) {&#10;                button.setFont(font);&#10;            }&#10;            if (color != null) {&#10;                button.setForeground(color);&#10;            }&#10;            if (backgroundColor != null) {&#10;                button.setBackground(backgroundColor);&#10;            }&#10;            if (preferredSize != null) {&#10;                button.setPreferredSize(preferredSize);&#10;            }&#10;            if (border != null) {&#10;                button.setBorder(BorderFactory.createLineBorder(border.color, border.width));&#10;            }&#10;            if (padding != null) {&#10;                javax.swing.border.Border currentBorder = button.getBorder();&#10;                javax.swing.border.Border paddingBorder = BorderFactory.createEmptyBorder(&#10;                    padding.top, padding.left, padding.bottom, padding.right&#10;                );&#10;                if (currentBorder != null) {&#10;                    button.setBorder(BorderFactory.createCompoundBorder(currentBorder, paddingBorder));&#10;                } else {&#10;                    button.setBorder(paddingBorder);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private static class BorderInfo {&#10;        final int width;&#10;        final Color color;&#10;&#10;        BorderInfo(int width, Color color) {&#10;            this.width = width;&#10;            this.color = color;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package io.github._3xhaust.dsl;&#10;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.platform.swing.SwingRenderer;&#10;import io.github._3xhaust.state.State;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;&#10;public class Widgets {&#10;&#10;    public static TextWidget Text(String value) {&#10;        return new TextWidget(value);&#10;    }&#10;&#10;    public static TextWidget Text(State&lt;?&gt; state) {&#10;        return new TextWidget(state);&#10;    }&#10;&#10;    public static ButtonWidget Button(String text, Runnable onClick) {&#10;        return new ButtonWidget(text, onClick, &quot;primary&quot;);&#10;    }&#10;&#10;    public static TextWidget Label(String text) {&#10;        return new TextWidget(text, true);&#10;    }&#10;&#10;    public static TextWidget Label(State&lt;?&gt; state) {&#10;        return new TextWidget(state, true);&#10;    }&#10;&#10;    public static class TextWidget implements View {&#10;        private final String text;&#10;        private final State&lt;?&gt; state;&#10;        private final boolean isLabel;&#10;&#10;        private Font font;&#10;        private Color color;&#10;        private Color backgroundColor;&#10;        private int textAlign = -1;&#10;        private Insets padding;&#10;        private BorderInfo border;&#10;        private Dimension minSize;&#10;&#10;        public TextWidget(String text) {&#10;            this.text = text;&#10;            this.state = null;&#10;            this.isLabel = false;&#10;        }&#10;&#10;        public TextWidget(State&lt;?&gt; state) {&#10;            this.text = null;&#10;            this.state = state;&#10;            this.isLabel = false;&#10;        }&#10;&#10;        public TextWidget(String text, boolean isLabel) {&#10;            this.text = text;&#10;            this.state = null;&#10;            this.isLabel = isLabel;&#10;        }&#10;&#10;        public TextWidget(State&lt;?&gt; state, boolean isLabel) {&#10;            this.text = null;&#10;            this.state = state;&#10;            this.isLabel = isLabel;&#10;        }&#10;&#10;        public TextWidget font(Mod.FontModifier... modifiers) {&#10;            if (modifiers.length == 1) {&#10;                this.font = modifiers[0].toFont();&#10;            } else {&#10;                String family = Font.SANS_SERIF;&#10;                int size = 12;&#10;                int weight = Font.PLAIN;&#10;&#10;                for (Mod.FontModifier mod : modifiers) {&#10;                    if (mod.getFamily() != null) family = mod.getFamily();&#10;                    if (mod.getSize() != -1) size = mod.getSize();&#10;                    if (mod.getWeight() != -1) weight = mod.getWeight();&#10;                }&#10;&#10;                this.font = new Font(family, weight, size);&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public TextWidget color(Color color) {&#10;            this.color = color;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget background(Color color) {&#10;            this.backgroundColor = color;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget alignCenter() {&#10;            this.textAlign = SwingConstants.CENTER;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget alignLeft() {&#10;            this.textAlign = SwingConstants.LEFT;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget alignRight() {&#10;            this.textAlign = SwingConstants.RIGHT;&#10;            return this;&#10;        }&#10;&#10;        public TextWidget padding(int all) {&#10;            this.padding = new Insets(all, all, all, all);&#10;            return this;&#10;        }&#10;&#10;        public TextWidget padding(int vertical, int horizontal) {&#10;            this.padding = new Insets(vertical, horizontal, vertical, horizontal);&#10;            return this;&#10;        }&#10;&#10;        public TextWidget border(int width, Color color) {&#10;            this.border = new BorderInfo(width, color);&#10;            return this;&#10;        }&#10;&#10;        public TextWidget minWidth(int width) {&#10;            this.minSize = new Dimension(width, 0);&#10;            return this;&#10;        }&#10;&#10;        @Override&#10;        public void render(io.github._3xhaust.core.Renderer renderer) {&#10;            if (renderer instanceof SwingRenderer swing) {&#10;                JLabel label;&#10;                if (state != null) {&#10;                    label = swing.label(state);&#10;                } else {&#10;                    label = swing.label(text);&#10;                }&#10;&#10;                applyModifiers(label);&#10;                swing.addComponent(label);&#10;            }&#10;        }&#10;&#10;        private void applyModifiers(JLabel label) {&#10;            if (font != null) {&#10;                label.setFont(font);&#10;            }&#10;            if (color != null) {&#10;                label.setForeground(color);&#10;            }&#10;            if (backgroundColor != null) {&#10;                label.setBackground(backgroundColor);&#10;                label.setOpaque(true);&#10;            }&#10;            if (textAlign != -1) {&#10;                label.setHorizontalAlignment(textAlign);&#10;            }&#10;            if (minSize != null) {&#10;                label.setMinimumSize(minSize);&#10;                label.setPreferredSize(minSize);&#10;            }&#10;            if (border != null) {&#10;                label.setBorder(BorderFactory.createLineBorder(border.color, border.width));&#10;            }&#10;            if (padding != null) {&#10;                javax.swing.border.Border currentBorder = label.getBorder();&#10;                javax.swing.border.Border paddingBorder = BorderFactory.createEmptyBorder(&#10;                    padding.top, padding.left, padding.bottom, padding.right&#10;                );&#10;                if (currentBorder != null) {&#10;                    label.setBorder(BorderFactory.createCompoundBorder(currentBorder, paddingBorder));&#10;                } else {&#10;                    label.setBorder(paddingBorder);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    public static class ButtonWidget implements View {&#10;        private final String text;&#10;        private final Runnable onClick;&#10;        private final String buttonType;&#10;&#10;        private Font font;&#10;        private Color color;&#10;        private Color backgroundColor;&#10;        private Insets padding;&#10;        private BorderInfo border;&#10;        private Dimension preferredSize;&#10;&#10;        public ButtonWidget(String text, Runnable onClick) {&#10;            this(text, onClick, &quot;primary&quot;);&#10;        }&#10;&#10;        public ButtonWidget(String text, Runnable onClick, String buttonType) {&#10;            this.text = text;&#10;            this.onClick = onClick;&#10;            this.buttonType = buttonType;&#10;        }&#10;&#10;        public ButtonWidget font(Mod.FontModifier... modifiers) {&#10;            if (modifiers.length == 1) {&#10;                this.font = modifiers[0].toFont();&#10;            } else {&#10;                String family = Font.SANS_SERIF;&#10;                int size = 12;&#10;                int weight = Font.PLAIN;&#10;&#10;                for (Mod.FontModifier mod : modifiers) {&#10;                    if (mod.getFamily() != null) family = mod.getFamily();&#10;                    if (mod.getSize() != -1) size = mod.getSize();&#10;                    if (mod.getWeight() != -1) weight = mod.getWeight();&#10;                }&#10;&#10;                this.font = new Font(family, weight, size);&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget color(Color color) {&#10;            this.color = color;&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget background(Color color) {&#10;            this.backgroundColor = color;&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget padding(int all) {&#10;            this.padding = new Insets(all, all, all, all);&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget padding(int vertical, int horizontal) {&#10;            this.padding = new Insets(vertical, horizontal, vertical, horizontal);&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget border(int width, Color color) {&#10;            this.border = new BorderInfo(width, color);&#10;            return this;&#10;        }&#10;&#10;        public ButtonWidget size(int width, int height) {&#10;            this.preferredSize = new Dimension(width, height);&#10;            return this;&#10;        }&#10;&#10;        @Override&#10;        public void render(io.github._3xhaust.core.Renderer renderer) {&#10;            if (renderer instanceof SwingRenderer swing) {&#10;                JButton button;&#10;&#10;                switch (buttonType) {&#10;                    case &quot;secondary&quot; -&gt; button = swing.secondaryButton(text, onClick);&#10;                    case &quot;success&quot; -&gt; button = swing.successButton(text, onClick);&#10;                    case &quot;danger&quot; -&gt; button = swing.dangerButton(text, onClick);&#10;                    case &quot;warning&quot; -&gt; button = swing.warningButton(text, onClick);&#10;                    default -&gt; button = swing.primaryButton(text, onClick);&#10;                }&#10;&#10;                applyModifiers(button);&#10;                swing.addComponent(button);&#10;            }&#10;        }&#10;&#10;        private void applyModifiers(JButton button) {&#10;            if (font != null) {&#10;                button.setFont(font);&#10;            }&#10;            if (color != null) {&#10;                button.setForeground(color);&#10;            }&#10;            if (backgroundColor != null) {&#10;                button.setBackground(backgroundColor);&#10;            }&#10;            if (preferredSize != null) {&#10;                button.setPreferredSize(preferredSize);&#10;            }&#10;            if (border != null) {&#10;                button.setBorder(BorderFactory.createLineBorder(border.color, border.width));&#10;            }&#10;            if (padding != null) {&#10;                javax.swing.border.Border currentBorder = button.getBorder();&#10;                javax.swing.border.Border paddingBorder = BorderFactory.createEmptyBorder(&#10;                    padding.top, padding.left, padding.bottom, padding.right&#10;                );&#10;                if (currentBorder != null) {&#10;                    button.setBorder(BorderFactory.createCompoundBorder(currentBorder, paddingBorder));&#10;                } else {&#10;                    button.setBorder(paddingBorder);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private static class BorderInfo {&#10;        final int width;&#10;        final Color color;&#10;&#10;        BorderInfo(int width, Color color) {&#10;            this.width = width;&#10;            this.color = color;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/platform/swing/SwingRenderer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/platform/swing/SwingRenderer.java" />
              <option name="originalContent" value="package io.github._3xhaust.platform.swing;&#10;&#10;import io.github._3xhaust.core.Renderer;&#10;import io.github._3xhaust.core.View;&#10;&#10;import javax.swing.*;&#10;import java.awt.*;&#10;import java.util.List;&#10;import java.util.Stack;&#10;&#10;public class SwingRenderer implements Renderer {&#10;    private JFrame frame;&#10;    private final Stack&lt;Container&gt; containerStack = new Stack&lt;&gt;();&#10;&#10;    @Override&#10;    public void init(String title, int width, int height) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            frame = new JFrame(title);&#10;            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;            frame.setSize(width, height);&#10;            JPanel rootPanel = new JPanel();&#10;            rootPanel.setLayout(new BorderLayout());&#10;            frame.setContentPane(rootPanel);&#10;            frame.setVisible(true);&#10;&#10;            containerStack.clear();&#10;            containerStack.push(rootPanel);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void mount(View root) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            if (containerStack.isEmpty()) {&#10;                System.err.println(&quot;containerStack is empty!&quot;);&#10;                return;&#10;            }&#10;&#10;            Container rootContainer = containerStack.peek();&#10;            rootContainer.removeAll();&#10;            root.render(this);&#10;            rootContainer.revalidate();&#10;            rootContainer.repaint();&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void update(View oldView, View newView) {&#10;    }&#10;&#10;    @Override&#10;    public void unmount(View view) {&#10;    }&#10;&#10;    @Override&#10;    public void renderContainer(String type, List&lt;View&gt; children) {&#10;        JPanel panel = new JPanel();&#10;&#10;        switch (type) {&#10;            case &quot;column&quot; -&gt; panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));&#10;            case &quot;row&quot; -&gt; panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));&#10;            case &quot;center&quot; -&gt; panel.setLayout(new GridBagLayout());&#10;            default -&gt; panel.setLayout(new FlowLayout());&#10;        }&#10;&#10;        pushContainer(panel);&#10;&#10;        if (&quot;center&quot;.equals(type)) {&#10;            GridBagConstraints gbc = new GridBagConstraints();&#10;            gbc.gridx = 0;&#10;            gbc.gridy = 0;&#10;            gbc.anchor = GridBagConstraints.CENTER;&#10;&#10;            JPanel childPanel = new JPanel();&#10;            if (children.size() == 1) {&#10;                pushContainer(childPanel);&#10;                children.get(0).render(this);&#10;                popContainer();&#10;            } else {&#10;                childPanel.setLayout(new BoxLayout(childPanel, BoxLayout.Y_AXIS));&#10;                pushContainer(childPanel);&#10;                for (View child : children) {&#10;                    child.render(this);&#10;                }&#10;                popContainer();&#10;            }&#10;&#10;            panel.add(childPanel, gbc);&#10;        } else {&#10;            for (int i = 0; i &lt; children.size(); i++) {&#10;                children.get(i).render(this);&#10;&#10;                // Gap 처리: 마지막 요소가 아닌 경우 spacing 추가&#10;                if (i &lt; children.size() - 1) {&#10;                    if (&quot;row&quot;.equals(type)) {&#10;                        panel.add(Box.createHorizontalStrut(5)); // 기본 gap&#10;                    } else if (&quot;column&quot;.equals(type)) {&#10;                        panel.add(Box.createVerticalStrut(5)); // 기본 gap&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        popContainer();&#10;&#10;        Container parent = containerStack.peek();&#10;&#10;        if (parent.getLayout() instanceof BorderLayout &amp;&amp; &quot;center&quot;.equals(type)) {&#10;            parent.add(panel, BorderLayout.CENTER);&#10;        } else {&#10;            parent.add(panel);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void pushContainer(Container container) {&#10;        containerStack.push(container);&#10;    }&#10;&#10;    @Override&#10;    public void popContainer() {&#10;        containerStack.pop();&#10;    }&#10;&#10;    @Override&#10;    public void addComponent(Component comp) {&#10;        if (!containerStack.isEmpty()) {&#10;            containerStack.peek().add(comp);&#10;        } else {&#10;            System.err.println(&quot;Error: No container to add component&quot;);&#10;        }&#10;    }&#10;&#10;    public JButton button(String text, Runnable onClick) {&#10;        JButton btn = new JButton(text);&#10;        btn.addActionListener(e -&gt; onClick.run());&#10;        return btn;&#10;    }&#10;&#10;    public JLabel label(String text) {&#10;        return new JLabel(text);&#10;    }&#10;&#10;    public &lt;T&gt; JLabel label(io.github._3xhaust.state.State&lt;T&gt; state) {&#10;        JLabel lbl = new JLabel(state.get().toString());&#10;        state.bindOnChange(newVal -&gt; SwingUtilities.invokeLater(() -&gt; lbl.setText(newVal.toString())));&#10;        return lbl;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package io.github._3xhaust.platform.swing;&#10;&#10;import io.github._3xhaust.core.Renderer;&#10;import io.github._3xhaust.core.View;&#10;import io.github._3xhaust.theme.Colors;&#10;&#10;import javax.swing.*;&#10;import javax.swing.border.EmptyBorder;&#10;import java.awt.*;&#10;import java.util.List;&#10;import java.util.Stack;&#10;&#10;public class SwingRenderer implements Renderer {&#10;    private JFrame frame;&#10;    private final Stack&lt;Container&gt; containerStack = new Stack&lt;&gt;();&#10;&#10;    static {&#10;        try {&#10;            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeel());&#10;        } catch (Exception e) {&#10;        }&#10;        &#10;        applyMaterialDesignDefaults();&#10;    }&#10;    &#10;    private static void applyMaterialDesignDefaults() {&#10;        Font defaultFont = new Font(&quot;SF Pro Display&quot;, Font.PLAIN, 14);&#10;        Font buttonFont = new Font(&quot;SF Pro Display&quot;, Font.MEDIUM, 14);&#10;        &#10;        UIManager.put(&quot;Button.font&quot;, buttonFont);&#10;        UIManager.put(&quot;Button.background&quot;, Colors.Blue500);&#10;        UIManager.put(&quot;Button.foreground&quot;, Colors.White);&#10;        UIManager.put(&quot;Button.focusPainted&quot;, false);&#10;        UIManager.put(&quot;Button.borderPainted&quot;, false);&#10;        &#10;        UIManager.put(&quot;Label.font&quot;, defaultFont);&#10;        UIManager.put(&quot;Label.foreground&quot;, Colors.Grey900);&#10;        &#10;        UIManager.put(&quot;Panel.background&quot;, Colors.Grey50);&#10;    }&#10;&#10;    @Override&#10;    public void init(String title, int width, int height) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            frame = new JFrame(title);&#10;            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;            frame.setSize(width, height);&#10;            frame.setLocationRelativeTo(null);&#10;            &#10;            JPanel rootPanel = new JPanel();&#10;            rootPanel.setLayout(new BorderLayout());&#10;            rootPanel.setBackground(Colors.Grey50);&#10;            frame.setContentPane(rootPanel);&#10;            frame.setVisible(true);&#10;&#10;            containerStack.clear();&#10;            containerStack.push(rootPanel);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void mount(View root) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            if (containerStack.isEmpty()) {&#10;                System.err.println(&quot;containerStack is empty!&quot;);&#10;                return;&#10;            }&#10;&#10;            Container rootContainer = containerStack.peek();&#10;            rootContainer.removeAll();&#10;            root.render(this);&#10;            rootContainer.revalidate();&#10;            rootContainer.repaint();&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void update(View oldView, View newView) {&#10;    }&#10;&#10;    @Override&#10;    public void unmount(View view) {&#10;    }&#10;&#10;    @Override&#10;    public void renderContainer(String type, List&lt;View&gt; children) {&#10;        JPanel panel = createStyledPanel();&#10;&#10;        switch (type) {&#10;            case &quot;column&quot; -&gt; panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));&#10;            case &quot;row&quot; -&gt; panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));&#10;            case &quot;center&quot; -&gt; panel.setLayout(new GridBagLayout());&#10;            default -&gt; panel.setLayout(new FlowLayout());&#10;        }&#10;&#10;        pushContainer(panel);&#10;&#10;        if (&quot;center&quot;.equals(type)) {&#10;            GridBagConstraints gbc = new GridBagConstraints();&#10;            gbc.gridx = 0;&#10;            gbc.gridy = 0;&#10;            gbc.anchor = GridBagConstraints.CENTER;&#10;&#10;            JPanel childPanel = createStyledPanel();&#10;            if (children.size() == 1) {&#10;                pushContainer(childPanel);&#10;                children.get(0).render(this);&#10;                popContainer();&#10;            } else {&#10;                childPanel.setLayout(new BoxLayout(childPanel, BoxLayout.Y_AXIS));&#10;                pushContainer(childPanel);&#10;                for (View child : children) {&#10;                    child.render(this);&#10;                }&#10;                popContainer();&#10;            }&#10;&#10;            panel.add(childPanel, gbc);&#10;        } else {&#10;            for (int i = 0; i &lt; children.size(); i++) {&#10;                children.get(i).render(this);&#10;&#10;                if (i &lt; children.size() - 1) {&#10;                    if (&quot;row&quot;.equals(type)) {&#10;                        panel.add(Box.createHorizontalStrut(8));&#10;                    } else if (&quot;column&quot;.equals(type)) {&#10;                        panel.add(Box.createVerticalStrut(8));&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        popContainer();&#10;&#10;        Container parent = containerStack.peek();&#10;&#10;        if (parent.getLayout() instanceof BorderLayout &amp;&amp; &quot;center&quot;.equals(type)) {&#10;            parent.add(panel, BorderLayout.CENTER);&#10;        } else {&#10;            parent.add(panel);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void pushContainer(Container container) {&#10;        containerStack.push(container);&#10;    }&#10;&#10;    @Override&#10;    public void popContainer() {&#10;        containerStack.pop();&#10;    }&#10;&#10;    @Override&#10;    public void addComponent(Component comp) {&#10;        if (!containerStack.isEmpty()) {&#10;            containerStack.peek().add(comp);&#10;        } else {&#10;            System.err.println(&quot;Error: No container to add component&quot;);&#10;        }&#10;    }&#10;&#10;    public JButton button(String text, Runnable onClick) {&#10;        JButton btn = new JButton(text);&#10;        &#10;        styleMaterialButton(btn);&#10;        &#10;        btn.addActionListener(e -&gt; onClick.run());&#10;        return btn;&#10;    }&#10;&#10;    public JLabel label(String text) {&#10;        JLabel label = new JLabel(text);&#10;        styleMaterialLabel(label);&#10;        return label;&#10;    }&#10;&#10;    public &lt;T&gt; JLabel label(io.github._3xhaust.state.State&lt;T&gt; state) {&#10;        JLabel lbl = new JLabel(state.get().toString());&#10;        styleMaterialLabel(lbl);&#10;        state.bindOnChange(newVal -&gt; SwingUtilities.invokeLater(() -&gt; lbl.setText(newVal.toString())));&#10;        return lbl;&#10;    }&#10;    &#10;    private JPanel createStyledPanel() {&#10;        JPanel panel = new JPanel();&#10;        panel.setBackground(Colors.Grey50);&#10;        panel.setBorder(new EmptyBorder(8, 8, 8, 8));&#10;        return panel;&#10;    }&#10;    &#10;    private void styleMaterialButton(JButton button) {&#10;        button.setBackground(Colors.Blue500);&#10;        button.setForeground(Colors.White);&#10;        button.setFont(new Font(&quot;SF Pro Display&quot;, Font.BOLD, 14));&#10;        button.setFocusPainted(false);&#10;        button.setBorderPainted(false);&#10;        button.setOpaque(true);&#10;        &#10;        button.setBorder(new EmptyBorder(12, 24, 12, 24));&#10;        &#10;        button.addMouseListener(new java.awt.event.MouseAdapter() {&#10;            @Override&#10;            public void mouseEntered(java.awt.event.MouseEvent e) {&#10;                button.setBackground(Colors.Blue600);&#10;            }&#10;            &#10;            @Override&#10;            public void mouseExited(java.awt.event.MouseEvent e) {&#10;                button.setBackground(Colors.Blue500);&#10;            }&#10;            &#10;            @Override&#10;            public void mousePressed(java.awt.event.MouseEvent e) {&#10;                button.setBackground(Colors.Blue700);&#10;            }&#10;            &#10;            @Override&#10;            public void mouseReleased(java.awt.event.MouseEvent e) {&#10;                button.setBackground(Colors.Blue600);&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void styleMaterialLabel(JLabel label) {&#10;        label.setForeground(Colors.Grey900);&#10;        label.setFont(new Font(&quot;SF Pro Display&quot;, Font.PLAIN, 14));&#10;    }&#10;    &#10;    public JButton primaryButton(String text, Runnable onClick) {&#10;        JButton btn = button(text, onClick);&#10;        btn.setBackground(Colors.Blue500);&#10;        return btn;&#10;    }&#10;    &#10;    public JButton secondaryButton(String text, Runnable onClick) {&#10;        JButton btn = button(text, onClick);&#10;        btn.setBackground(Colors.Grey500);&#10;        btn.setForeground(Colors.White);&#10;        return btn;&#10;    }&#10;    &#10;    public JButton successButton(String text, Runnable onClick) {&#10;        JButton btn = button(text, onClick);&#10;        btn.setBackground(Colors.Green500);&#10;        btn.setForeground(Colors.White);&#10;        return btn;&#10;    }&#10;    &#10;    public JButton dangerButton(String text, Runnable onClick) {&#10;        JButton btn = button(text, onClick);&#10;        btn.setBackground(Colors.Red500);&#10;        btn.setForeground(Colors.White);&#10;        return btn;&#10;    }&#10;    &#10;    public JButton warningButton(String text, Runnable onClick) {&#10;        JButton btn = button(text, onClick);&#10;        btn.setBackground(Colors.Orange500);&#10;        btn.setForeground(Colors.White);&#10;        return btn;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/theme/Colors.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/theme/Colors.java" />
              <option name="originalContent" value="package io.github._3xhaust.theme;&#10;&#10;import java.awt.*;&#10;&#10;public class Colors {&#10;    public static final Color Blue500 = new Color(59, 130, 246);&#10;    public static final Color Gray600 = new Color(75, 85, 99);&#10;    public static final Color Gray200 = new Color(229, 231, 235);&#10;    public static final Color Gray400 = new Color(156, 163, 175);&#10;    public static final Color Red600 = new Color(220, 38, 127);&#10;    public static final Color Yellow50 = new Color(254, 252, 232);&#10;    public static final Color Black = Color.BLACK;&#10;    public static final Color White = Color.WHITE;&#10;}&#10;" />
              <option name="updatedContent" value="package io.github._3xhaust.theme;&#10;&#10;import java.awt.*;&#10;&#10;/**&#10; * Material Design 색상 팔레트&#10; * Flutter의 Colors 클래스를 참고하여 구현&#10; */&#10;public class Colors {&#10;    // 기존 색상들&#10;    public static final Color Blue500 = new Color(59, 130, 246);&#10;    public static final Color Gray600 = new Color(75, 85, 99);&#10;    public static final Color Gray200 = new Color(229, 231, 235);&#10;    public static final Color Gray400 = new Color(156, 163, 175);&#10;    public static final Color Red600 = new Color(220, 38, 127);&#10;    public static final Color Yellow50 = new Color(254, 252, 232);&#10;    public static final Color Black = Color.BLACK;&#10;    public static final Color White = Color.WHITE;&#10;&#10;    // 투명도별 검은색&#10;    public static final Color Transparent = new Color(0, 0, 0, 0);&#10;    public static final Color Black87 = new Color(0, 0, 0, 221);&#10;    public static final Color Black54 = new Color(0, 0, 0, 138);&#10;    public static final Color Black45 = new Color(0, 0, 0, 115);&#10;    public static final Color Black38 = new Color(0, 0, 0, 97);&#10;    public static final Color Black26 = new Color(0, 0, 0, 66);&#10;    public static final Color Black12 = new Color(0, 0, 0, 31);&#10;&#10;    // 투명도별 흰색&#10;    public static final Color White70 = new Color(255, 255, 255, 179);&#10;    public static final Color White60 = new Color(255, 255, 255, 153);&#10;    public static final Color White54 = new Color(255, 255, 255, 138);&#10;    public static final Color White38 = new Color(255, 255, 255, 98);&#10;    public static final Color White30 = new Color(255, 255, 255, 77);&#10;    public static final Color White24 = new Color(255, 255, 255, 61);&#10;    public static final Color White12 = new Color(255, 255, 255, 31);&#10;    public static final Color White10 = new Color(255, 255, 255, 26);&#10;&#10;    // Red 색상 팔레트&#10;    public static final Color Red50 = new Color(255, 235, 238);&#10;    public static final Color Red100 = new Color(255, 205, 210);&#10;    public static final Color Red200 = new Color(239, 154, 154);&#10;    public static final Color Red300 = new Color(229, 115, 115);&#10;    public static final Color Red400 = new Color(239, 83, 80);&#10;    public static final Color Red500 = new Color(244, 67, 54);&#10;    public static final Color Red700 = new Color(211, 47, 47);&#10;    public static final Color Red800 = new Color(198, 40, 40);&#10;    public static final Color Red900 = new Color(183, 28, 28);&#10;&#10;    // Red Accent&#10;    public static final Color RedAccent100 = new Color(255, 138, 128);&#10;    public static final Color RedAccent200 = new Color(255, 82, 82);&#10;    public static final Color RedAccent400 = new Color(255, 23, 68);&#10;    public static final Color RedAccent700 = new Color(213, 0, 0);&#10;&#10;    // Pink 색상 팔레트&#10;    public static final Color Pink50 = new Color(252, 228, 236);&#10;    public static final Color Pink100 = new Color(248, 187, 208);&#10;    public static final Color Pink200 = new Color(244, 143, 177);&#10;    public static final Color Pink300 = new Color(240, 98, 146);&#10;    public static final Color Pink400 = new Color(236, 64, 122);&#10;    public static final Color Pink500 = new Color(233, 30, 99);&#10;    public static final Color Pink600 = new Color(216, 27, 96);&#10;    public static final Color Pink700 = new Color(194, 24, 91);&#10;    public static final Color Pink800 = new Color(173, 20, 87);&#10;    public static final Color Pink900 = new Color(136, 14, 79);&#10;&#10;    // Pink Accent&#10;    public static final Color PinkAccent100 = new Color(255, 128, 171);&#10;    public static final Color PinkAccent200 = new Color(255, 64, 129);&#10;    public static final Color PinkAccent400 = new Color(245, 0, 87);&#10;    public static final Color PinkAccent700 = new Color(197, 17, 98);&#10;&#10;    // Purple 색상 팔레트&#10;    public static final Color Purple50 = new Color(243, 229, 245);&#10;    public static final Color Purple100 = new Color(225, 190, 231);&#10;    public static final Color Purple200 = new Color(206, 147, 216);&#10;    public static final Color Purple300 = new Color(186, 104, 200);&#10;    public static final Color Purple400 = new Color(171, 71, 188);&#10;    public static final Color Purple500 = new Color(156, 39, 176);&#10;    public static final Color Purple600 = new Color(142, 36, 170);&#10;    public static final Color Purple700 = new Color(123, 31, 162);&#10;    public static final Color Purple800 = new Color(106, 27, 154);&#10;    public static final Color Purple900 = new Color(74, 20, 140);&#10;&#10;    // Purple Accent&#10;    public static final Color PurpleAccent100 = new Color(234, 128, 252);&#10;    public static final Color PurpleAccent200 = new Color(224, 64, 251);&#10;    public static final Color PurpleAccent400 = new Color(213, 0, 249);&#10;    public static final Color PurpleAccent700 = new Color(170, 0, 255);&#10;&#10;    // Deep Purple 색상 팔레트&#10;    public static final Color DeepPurple50 = new Color(237, 231, 246);&#10;    public static final Color DeepPurple100 = new Color(209, 196, 233);&#10;    public static final Color DeepPurple200 = new Color(179, 157, 219);&#10;    public static final Color DeepPurple300 = new Color(149, 117, 205);&#10;    public static final Color DeepPurple400 = new Color(126, 87, 194);&#10;    public static final Color DeepPurple500 = new Color(103, 58, 183);&#10;    public static final Color DeepPurple600 = new Color(94, 53, 177);&#10;    public static final Color DeepPurple700 = new Color(81, 45, 168);&#10;    public static final Color DeepPurple800 = new Color(69, 39, 160);&#10;    public static final Color DeepPurple900 = new Color(49, 27, 146);&#10;&#10;    // Deep Purple Accent&#10;    public static final Color DeepPurpleAccent100 = new Color(179, 136, 255);&#10;    public static final Color DeepPurpleAccent200 = new Color(124, 77, 255);&#10;    public static final Color DeepPurpleAccent400 = new Color(101, 31, 255);&#10;    public static final Color DeepPurpleAccent700 = new Color(98, 0, 234);&#10;&#10;    // Indigo 색상 팔레트&#10;    public static final Color Indigo50 = new Color(232, 234, 246);&#10;    public static final Color Indigo100 = new Color(197, 202, 233);&#10;    public static final Color Indigo200 = new Color(159, 168, 218);&#10;    public static final Color Indigo300 = new Color(121, 134, 203);&#10;    public static final Color Indigo400 = new Color(92, 107, 192);&#10;    public static final Color Indigo500 = new Color(63, 81, 181);&#10;    public static final Color Indigo600 = new Color(57, 73, 171);&#10;    public static final Color Indigo700 = new Color(48, 63, 159);&#10;    public static final Color Indigo800 = new Color(40, 53, 147);&#10;    public static final Color Indigo900 = new Color(26, 35, 126);&#10;&#10;    // Indigo Accent&#10;    public static final Color IndigoAccent100 = new Color(140, 158, 255);&#10;    public static final Color IndigoAccent200 = new Color(83, 109, 254);&#10;    public static final Color IndigoAccent400 = new Color(61, 90, 254);&#10;    public static final Color IndigoAccent700 = new Color(48, 79, 254);&#10;&#10;    // Blue 색상 팔레트&#10;    public static final Color Blue50 = new Color(227, 242, 253);&#10;    public static final Color Blue100 = new Color(187, 222, 251);&#10;    public static final Color Blue200 = new Color(144, 202, 249);&#10;    public static final Color Blue300 = new Color(100, 181, 246);&#10;    public static final Color Blue400 = new Color(66, 165, 245);&#10;    // public static final Color Blue500 = new Color(33, 150, 243); // 이미 위에 정의됨&#10;    public static final Color Blue600 = new Color(30, 136, 229);&#10;    public static final Color Blue700 = new Color(25, 118, 210);&#10;    public static final Color Blue800 = new Color(21, 101, 192);&#10;    public static final Color Blue900 = new Color(13, 71, 161);&#10;&#10;    // Blue Accent&#10;    public static final Color BlueAccent100 = new Color(130, 177, 255);&#10;    public static final Color BlueAccent200 = new Color(68, 138, 255);&#10;    public static final Color BlueAccent400 = new Color(41, 121, 255);&#10;    public static final Color BlueAccent700 = new Color(41, 98, 255);&#10;&#10;    // Light Blue 색상 팔레트&#10;    public static final Color LightBlue50 = new Color(225, 245, 254);&#10;    public static final Color LightBlue100 = new Color(179, 229, 252);&#10;    public static final Color LightBlue200 = new Color(129, 212, 250);&#10;    public static final Color LightBlue300 = new Color(79, 195, 247);&#10;    public static final Color LightBlue400 = new Color(41, 182, 246);&#10;    public static final Color LightBlue500 = new Color(3, 169, 244);&#10;    public static final Color LightBlue600 = new Color(3, 155, 229);&#10;    public static final Color LightBlue700 = new Color(2, 136, 209);&#10;    public static final Color LightBlue800 = new Color(2, 119, 189);&#10;    public static final Color LightBlue900 = new Color(1, 87, 155);&#10;&#10;    // Light Blue Accent&#10;    public static final Color LightBlueAccent100 = new Color(128, 216, 255);&#10;    public static final Color LightBlueAccent200 = new Color(64, 196, 255);&#10;    public static final Color LightBlueAccent400 = new Color(0, 176, 255);&#10;    public static final Color LightBlueAccent700 = new Color(0, 145, 234);&#10;&#10;    // Cyan 색상 팔레트&#10;    public static final Color Cyan50 = new Color(224, 247, 250);&#10;    public static final Color Cyan100 = new Color(178, 235, 242);&#10;    public static final Color Cyan200 = new Color(128, 222, 234);&#10;    public static final Color Cyan300 = new Color(77, 208, 225);&#10;    public static final Color Cyan400 = new Color(38, 198, 218);&#10;    public static final Color Cyan500 = new Color(0, 188, 212);&#10;    public static final Color Cyan600 = new Color(0, 172, 193);&#10;    public static final Color Cyan700 = new Color(0, 151, 167);&#10;    public static final Color Cyan800 = new Color(0, 131, 143);&#10;    public static final Color Cyan900 = new Color(0, 96, 100);&#10;&#10;    // Cyan Accent&#10;    public static final Color CyanAccent100 = new Color(132, 255, 255);&#10;    public static final Color CyanAccent200 = new Color(24, 255, 255);&#10;    public static final Color CyanAccent400 = new Color(0, 229, 255);&#10;    public static final Color CyanAccent700 = new Color(0, 184, 212);&#10;&#10;    // Teal 색상 팔레트&#10;    public static final Color Teal50 = new Color(224, 242, 241);&#10;    public static final Color Teal100 = new Color(178, 223, 219);&#10;    public static final Color Teal200 = new Color(128, 203, 196);&#10;    public static final Color Teal300 = new Color(77, 182, 172);&#10;    public static final Color Teal400 = new Color(38, 166, 154);&#10;    public static final Color Teal500 = new Color(0, 150, 136);&#10;    public static final Color Teal600 = new Color(0, 137, 123);&#10;    public static final Color Teal700 = new Color(0, 121, 107);&#10;    public static final Color Teal800 = new Color(0, 105, 92);&#10;    public static final Color Teal900 = new Color(0, 77, 64);&#10;&#10;    // Teal Accent&#10;    public static final Color TealAccent100 = new Color(167, 255, 235);&#10;    public static final Color TealAccent200 = new Color(100, 255, 218);&#10;    public static final Color TealAccent400 = new Color(29, 233, 182);&#10;    public static final Color TealAccent700 = new Color(0, 191, 165);&#10;&#10;    // Green 색상 팔레트&#10;    public static final Color Green50 = new Color(232, 245, 233);&#10;    public static final Color Green100 = new Color(200, 230, 201);&#10;    public static final Color Green200 = new Color(165, 214, 167);&#10;    public static final Color Green300 = new Color(129, 199, 132);&#10;    public static final Color Green400 = new Color(102, 187, 106);&#10;    public static final Color Green500 = new Color(76, 175, 80);&#10;    public static final Color Green600 = new Color(67, 160, 71);&#10;    public static final Color Green700 = new Color(56, 142, 60);&#10;    public static final Color Green800 = new Color(46, 125, 50);&#10;    public static final Color Green900 = new Color(27, 94, 32);&#10;&#10;    // Green Accent&#10;    public static final Color GreenAccent100 = new Color(185, 246, 202);&#10;    public static final Color GreenAccent200 = new Color(105, 240, 174);&#10;    public static final Color GreenAccent400 = new Color(0, 230, 118);&#10;    public static final Color GreenAccent700 = new Color(0, 200, 83);&#10;&#10;    // Light Green 색상 팔레트&#10;    public static final Color LightGreen50 = new Color(241, 248, 233);&#10;    public static final Color LightGreen100 = new Color(220, 237, 200);&#10;    public static final Color LightGreen200 = new Color(197, 225, 165);&#10;    public static final Color LightGreen300 = new Color(174, 213, 129);&#10;    public static final Color LightGreen400 = new Color(156, 204, 101);&#10;    public static final Color LightGreen500 = new Color(139, 195, 74);&#10;    public static final Color LightGreen600 = new Color(124, 179, 66);&#10;    public static final Color LightGreen700 = new Color(104, 159, 56);&#10;    public static final Color LightGreen800 = new Color(85, 139, 47);&#10;    public static final Color LightGreen900 = new Color(51, 105, 30);&#10;&#10;    // Light Green Accent&#10;    public static final Color LightGreenAccent100 = new Color(204, 255, 144);&#10;    public static final Color LightGreenAccent200 = new Color(178, 255, 89);&#10;    public static final Color LightGreenAccent400 = new Color(118, 255, 3);&#10;    public static final Color LightGreenAccent700 = new Color(100, 221, 23);&#10;&#10;    // Lime 색상 팔레트&#10;    public static final Color Lime50 = new Color(249, 251, 231);&#10;    public static final Color Lime100 = new Color(240, 244, 195);&#10;    public static final Color Lime200 = new Color(230, 238, 156);&#10;    public static final Color Lime300 = new Color(220, 231, 117);&#10;    public static final Color Lime400 = new Color(212, 225, 87);&#10;    public static final Color Lime500 = new Color(205, 220, 57);&#10;    public static final Color Lime600 = new Color(192, 202, 51);&#10;    public static final Color Lime700 = new Color(175, 180, 43);&#10;    public static final Color Lime800 = new Color(158, 157, 36);&#10;    public static final Color Lime900 = new Color(130, 119, 23);&#10;&#10;    // Lime Accent&#10;    public static final Color LimeAccent100 = new Color(244, 255, 129);&#10;    public static final Color LimeAccent200 = new Color(238, 255, 65);&#10;    public static final Color LimeAccent400 = new Color(198, 255, 0);&#10;    public static final Color LimeAccent700 = new Color(174, 234, 0);&#10;&#10;    // Yellow 색상 팔레트&#10;    public static final Color Yellow100 = new Color(255, 249, 196);&#10;    public static final Color Yellow200 = new Color(255, 245, 157);&#10;    public static final Color Yellow300 = new Color(255, 241, 118);&#10;    public static final Color Yellow400 = new Color(255, 238, 88);&#10;    public static final Color Yellow500 = new Color(255, 235, 59);&#10;    public static final Color Yellow600 = new Color(253, 216, 53);&#10;    public static final Color Yellow700 = new Color(251, 192, 45);&#10;    public static final Color Yellow800 = new Color(249, 168, 37);&#10;    public static final Color Yellow900 = new Color(245, 127, 23);&#10;&#10;    // Yellow Accent&#10;    public static final Color YellowAccent100 = new Color(255, 255, 141);&#10;    public static final Color YellowAccent200 = new Color(255, 255, 0);&#10;    public static final Color YellowAccent400 = new Color(255, 234, 0);&#10;    public static final Color YellowAccent700 = new Color(255, 214, 0);&#10;&#10;    // Amber 색상 팔레트&#10;    public static final Color Amber50 = new Color(255, 248, 225);&#10;    public static final Color Amber100 = new Color(255, 236, 179);&#10;    public static final Color Amber200 = new Color(255, 224, 130);&#10;    public static final Color Amber300 = new Color(255, 213, 79);&#10;    public static final Color Amber400 = new Color(255, 202, 40);&#10;    public static final Color Amber500 = new Color(255, 193, 7);&#10;    public static final Color Amber600 = new Color(255, 179, 0);&#10;    public static final Color Amber700 = new Color(255, 160, 0);&#10;    public static final Color Amber800 = new Color(255, 143, 0);&#10;    public static final Color Amber900 = new Color(255, 111, 0);&#10;&#10;    // Amber Accent&#10;    public static final Color AmberAccent100 = new Color(255, 229, 127);&#10;    public static final Color AmberAccent200 = new Color(255, 215, 64);&#10;    public static final Color AmberAccent400 = new Color(255, 196, 0);&#10;    public static final Color AmberAccent700 = new Color(255, 171, 0);&#10;&#10;    // Orange 색상 팔레트&#10;    public static final Color Orange50 = new Color(255, 243, 224);&#10;    public static final Color Orange100 = new Color(255, 224, 178);&#10;    public static final Color Orange200 = new Color(255, 204, 128);&#10;    public static final Color Orange300 = new Color(255, 183, 77);&#10;    public static final Color Orange400 = new Color(255, 167, 38);&#10;    public static final Color Orange500 = new Color(255, 152, 0);&#10;    public static final Color Orange600 = new Color(251, 140, 0);&#10;    public static final Color Orange700 = new Color(245, 124, 0);&#10;    public static final Color Orange800 = new Color(239, 108, 0);&#10;    public static final Color Orange900 = new Color(230, 81, 0);&#10;&#10;    // Orange Accent&#10;    public static final Color OrangeAccent100 = new Color(255, 209, 128);&#10;    public static final Color OrangeAccent200 = new Color(255, 171, 64);&#10;    public static final Color OrangeAccent400 = new Color(255, 145, 0);&#10;    public static final Color OrangeAccent700 = new Color(255, 109, 0);&#10;&#10;    // Deep Orange 색상 팔레트&#10;    public static final Color DeepOrange50 = new Color(251, 233, 231);&#10;    public static final Color DeepOrange100 = new Color(255, 204, 188);&#10;    public static final Color DeepOrange200 = new Color(255, 171, 145);&#10;    public static final Color DeepOrange300 = new Color(255, 138, 101);&#10;    public static final Color DeepOrange400 = new Color(255, 112, 67);&#10;    public static final Color DeepOrange500 = new Color(255, 87, 34);&#10;    public static final Color DeepOrange600 = new Color(244, 81, 30);&#10;    public static final Color DeepOrange700 = new Color(230, 74, 25);&#10;    public static final Color DeepOrange800 = new Color(216, 67, 21);&#10;    public static final Color DeepOrange900 = new Color(191, 54, 12);&#10;&#10;    // Deep Orange Accent&#10;    public static final Color DeepOrangeAccent100 = new Color(255, 158, 128);&#10;    public static final Color DeepOrangeAccent200 = new Color(255, 110, 64);&#10;    public static final Color DeepOrangeAccent400 = new Color(255, 61, 0);&#10;    public static final Color DeepOrangeAccent700 = new Color(221, 44, 0);&#10;&#10;    // Brown 색상 팔레트&#10;    public static final Color Brown50 = new Color(239, 235, 233);&#10;    public static final Color Brown100 = new Color(215, 204, 200);&#10;    public static final Color Brown200 = new Color(188, 170, 164);&#10;    public static final Color Brown300 = new Color(161, 136, 127);&#10;    public static final Color Brown400 = new Color(141, 110, 99);&#10;    public static final Color Brown500 = new Color(121, 85, 72);&#10;    public static final Color Brown600 = new Color(109, 76, 65);&#10;    public static final Color Brown700 = new Color(93, 64, 55);&#10;    public static final Color Brown800 = new Color(78, 52, 46);&#10;    public static final Color Brown900 = new Color(62, 39, 35);&#10;&#10;    // Grey 색상 팔레트&#10;    public static final Color Grey50 = new Color(250, 250, 250);&#10;    public static final Color Grey100 = new Color(245, 245, 245);&#10;    public static final Color Grey300 = new Color(224, 224, 224);&#10;    public static final Color Grey350 = new Color(214, 214, 214);&#10;    public static final Color Grey500 = new Color(158, 158, 158);&#10;    public static final Color Grey700 = new Color(97, 97, 97);&#10;    public static final Color Grey800 = new Color(66, 66, 66);&#10;    public static final Color Grey850 = new Color(48, 48, 48);&#10;    public static final Color Grey900 = new Color(33, 33, 33);&#10;&#10;    // Blue Grey 색상 팔레트&#10;    public static final Color BlueGrey50 = new Color(236, 239, 241);&#10;    public static final Color BlueGrey100 = new Color(207, 216, 220);&#10;    public static final Color BlueGrey200 = new Color(176, 190, 197);&#10;    public static final Color BlueGrey300 = new Color(144, 164, 174);&#10;    public static final Color BlueGrey400 = new Color(120, 144, 156);&#10;    public static final Color BlueGrey500 = new Color(96, 125, 139);&#10;    public static final Color BlueGrey600 = new Color(84, 110, 122);&#10;    public static final Color BlueGrey700 = new Color(69, 90, 100);&#10;    public static final Color BlueGrey800 = new Color(55, 71, 79);&#10;    public static final Color BlueGrey900 = new Color(38, 50, 56);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/theme/Tokens.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/io/github/_3xhaust/theme/Tokens.java" />
              <option name="updatedContent" value="package io.github._3xhaust.theme;&#10;&#10;import java.awt.*;&#10;&#10;public class Tokens {&#10;    &#10;    // Colors&#10;    public static final Color Blue500 = new Color(59, 130, 246);&#10;    public static final Color Gray600 = new Color(75, 85, 99);&#10;    public static final Color Gray200 = new Color(229, 231, 235);&#10;    public static final Color Gray400 = new Color(156, 163, 175);&#10;    public static final Color Red600 = new Color(220, 38, 127);&#10;    public static final Color Yellow50 = new Color(254, 252, 232);&#10;    public static final Color Black = Color.BLACK;&#10;    public static final Color White = Color.WHITE;&#10;    &#10;    // Additional colors&#10;    public static final Color Blue600 = new Color(37, 99, 235);&#10;    public static final Color Green500 = new Color(34, 197, 94);&#10;    public static final Color Purple500 = new Color(168, 85, 247);&#10;    public static final Color Orange500 = new Color(249, 115, 22);&#10;    &#10;    // Spacing&#10;    public static final int SPACE_1 = 4;&#10;    public static final int SPACE_2 = 8;&#10;    public static final int SPACE_3 = 12;&#10;    public static final int SPACE_4 = 16;&#10;    public static final int SPACE_6 = 24;&#10;    public static final int SPACE_8 = 32;&#10;    &#10;    // Border radius&#10;    public static final int RADIUS_SM = 2;&#10;    public static final int RADIUS_MD = 4;&#10;    public static final int RADIUS_LG = 8;&#10;    public static final int RADIUS_XL = 12;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>