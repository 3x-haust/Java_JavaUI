plugins {
    id 'java'
    id 'application'
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.27'
}

group = 'io.github._3xhaust'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    implementation 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'

    testImplementation 'org.projectlombok:lombok:1.18.38'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

    def javafxVersion = '21.0.3'
    def os = org.gradle.internal.os.OperatingSystem.current()
    def arch = System.getProperty('os.arch')
    def PLATFORM = (os.isMacOsX() ? (arch.contains('aarch64') || arch.contains('arm') ? 'mac-aarch64' : 'mac')
            : os.isWindows() ? (arch.contains('64') ? 'win' : 'win-x86')
            : os.isLinux() ? (arch.contains('aarch64') || arch.contains('arm') ? 'linux-aarch64' : 'linux')
            : '')

    implementation "org.openjfx:javafx-base:${javafxVersion}:${PLATFORM}"
    implementation "org.openjfx:javafx-graphics:${javafxVersion}:${PLATFORM}"
    implementation "org.openjfx:javafx-controls:${javafxVersion}:${PLATFORM}"
}


test {
    useJUnitPlatform()
}

application {
    // 공용 런처 진입점 (기본 SWING, 인자/속성으로 플랫폼 선택 가능)
    mainClass = 'examples.hello_world.Main'
}

tasks.register('runFx', JavaExec) {
    group = 'application'
    description = 'Run JavaFX example'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'examples.hello_world.Main'
    // Use JavaFX modules from runtimeClasspath as module-path
    doFirst {
        jvmArgs '--module-path', configurations.runtimeClasspath.asPath,
                '--add-modules', 'javafx.controls,javafx.graphics'
        jvmArgs '-Djavaui.platform=javafx'
    }
}

gluonfx {
    target = 'ios-sim'
    mainClassName = 'examples.hello_world.Main'
    // JavaFX는 iOS 타깃에서 필수이므로 런처가 자동으로 FXBootstrap을 사용하도록 속성 지정
    // GraalVM native-image가 JavaFX Application 서브클래스(FXBootstrap)의 기본 생성자를 리플렉션으로 호출하므로
    // 해당 클래스를 리플렉션 화이트리스트에 등록한다.
    reflectionList = [
            'io.github._3xhaust.platform.javafx.FXBootstrap'
    ]
}

// ---------- iOS Shortcuts ----------
tasks.register('iosBuild') {
    group = 'GluonFX'
    description = 'Build iOS native image and package the .app bundle'
    dependsOn 'nativeBuild', 'nativePackage'
}

tasks.register('iosInstall') {
    group = 'GluonFX'
    description = 'Install the .app bundle to the booted iOS Simulator'
    dependsOn 'nativeInstall'
}

tasks.register('iosRun') {
    group = 'GluonFX'
    description = 'Run the app on the booted iOS Simulator'
    dependsOn 'nativeRun'
}

tasks.register('ios') {
    group = 'GluonFX'
    description = 'One-shot: build + package + install + run on iOS Simulator'
    dependsOn 'iosBuild', 'iosInstall', 'iosRun'
}

// Optional helpers (no rebuild): fast relaunch/open
tasks.register('iosOpen', Exec) {
    group = 'GluonFX'
    description = 'Open iOS Simulator app'
    commandLine 'open', '-a', 'Simulator'
}

tasks.register('iosLaunch', Exec) {
    group = 'GluonFX'
    description = 'Launch installed app on the booted simulator (no rebuild)'
    commandLine 'xcrun', 'simctl', 'launch', 'booted', 'io.github._3xhaust.javaUI'
}
